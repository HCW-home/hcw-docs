{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HCW@Home - Simple & Secure remote consultations HCW@Home is a fork of HUG@Home solution co-developped by H\u00f4pital Universitaire de Gen\u00e8ve and Iabsis SARL. HCW@Home is a scalable, institution-level secure teleconsultation system for typical telemedicine scenarios, achieved through close collaboration with healthcare professionals. It is fully open-source and offers integrated features for chat, audio, and video calls using WebRTC. Feature Voice & Video consultations Secure Chat Invite patient in seconds by SMS or Email Send attachment or image PDF reporting Connect to external solution (OpenEMR) Invite guess and translator External authentication (SAML, JWT, Active Directory) Tech stack Exclusively coded with NodeJS language Frontend are coded with Angular framework Patient fronend also use Ionic framework Backend is coded with SailsJS framework Data are stored in MongoDB database Sessions are stored in Redis database Mediasoup API is based on Mediasoup for the WebRTC stack and also Express for the API Links Official website: https://hcw-at-home.com/ Licensing Health Care Worker is provided under GPLv3. Credit Health Care Worker @Home is supported by: Iabsis SARL","title":"Introduction"},{"location":"#hcwhome-simple-secure-remote-consultations","text":"HCW@Home is a fork of HUG@Home solution co-developped by H\u00f4pital Universitaire de Gen\u00e8ve and Iabsis SARL. HCW@Home is a scalable, institution-level secure teleconsultation system for typical telemedicine scenarios, achieved through close collaboration with healthcare professionals. It is fully open-source and offers integrated features for chat, audio, and video calls using WebRTC.","title":"HCW@Home - Simple &amp; Secure remote consultations"},{"location":"#feature","text":"Voice & Video consultations Secure Chat Invite patient in seconds by SMS or Email Send attachment or image PDF reporting Connect to external solution (OpenEMR) Invite guess and translator External authentication (SAML, JWT, Active Directory)","title":"Feature"},{"location":"#tech-stack","text":"Exclusively coded with NodeJS language Frontend are coded with Angular framework Patient fronend also use Ionic framework Backend is coded with SailsJS framework Data are stored in MongoDB database Sessions are stored in Redis database Mediasoup API is based on Mediasoup for the WebRTC stack and also Express for the API","title":"Tech stack"},{"location":"#links","text":"Official website: https://hcw-at-home.com/","title":"Links"},{"location":"#licensing","text":"Health Care Worker is provided under GPLv3.","title":"Licensing"},{"location":"#credit","text":"Health Care Worker @Home is supported by: Iabsis SARL","title":"Credit"},{"location":"admin/","text":"Admin interface Admin interface permits to a site administrator to check user roles, approve Requester account done by Partners, manage waiting queues, administrer Mediasoup servers and get anonymised statistics. Users administration Open Users to review all registered users. Warning, if auto-create mode is enable with SSO, new users might be created on fly. Click on the Pen to edit a user information and to assign user to queues. Requester administration Requester administration only permits to toggle the active state of a requester. Click on Active switch box to allow or deny the access to consultation request page. Waiting queues Waiting queues are shared areas across several doctors. Whenever a consultation is requested by a patient or a Partner, all doctor in this queues will see it until somebody handle it. Mediasoup servers HCW@Home can distribute calls over severals Mediasoup servers. When a call is requested, a randon Mediasoup server is taken and users are sent to. The interface permits to do updates or disable server on fly without the need to interupt users or restart server.","title":"Administrator interface"},{"location":"admin/#admin-interface","text":"Admin interface permits to a site administrator to check user roles, approve Requester account done by Partners, manage waiting queues, administrer Mediasoup servers and get anonymised statistics.","title":"Admin interface"},{"location":"admin/#users-administration","text":"Open Users to review all registered users. Warning, if auto-create mode is enable with SSO, new users might be created on fly. Click on the Pen to edit a user information and to assign user to queues.","title":"Users administration"},{"location":"admin/#requester-administration","text":"Requester administration only permits to toggle the active state of a requester. Click on Active switch box to allow or deny the access to consultation request page.","title":"Requester administration"},{"location":"admin/#waiting-queues","text":"Waiting queues are shared areas across several doctors. Whenever a consultation is requested by a patient or a Partner, all doctor in this queues will see it until somebody handle it.","title":"Waiting queues"},{"location":"admin/#mediasoup-servers","text":"HCW@Home can distribute calls over severals Mediasoup servers. When a call is requested, a randon Mediasoup server is taken and users are sent to. The interface permits to do updates or disable server on fly without the need to interupt users or restart server.","title":"Mediasoup servers"},{"location":"api/","text":"API documentation Warning, this guide will help integration any kind of form, but is probably incomplete. If you looks for all possible endpoint, you might try with Bruno This guide provide you some endpoint documentation with sample of how to use HCW@Home API. Response format Our API is very standard and returns http code in response of all requests: 200 : everything went well 400 : malformed request 401 : unauthorized request 500 : server error Authenticate as service account An account must be created with scheduler role. This specific user can bypass the 2FA auth. Authentication is done via an email and a password. The application returns a jwt token stored in the cookies. The header x-access-token must be defined with the returned JWT. Method and URL POST : /api/v1/login-local Payload { \"email\": \"sample-user@test.com\", \"password\": \"123456890-very-long-password\" } email : HCW login password : HCW password Response { \"message\":\"Login Successful\", \"user\":{ \"email\":\"aa@bb.cc\", \"username\":\"\", \"id\":\"5cb52379a286b24da029a03a\", \"role\":\"scheduler\", \"firstName\":\"Muhammed\", \"lastName\":\"Dev\", \"phoneNumber\":\"+201065234278\", \"authPhoneNumber\":\"+201065234289\", \"viewAllQueues\":true, \"doctorClientVersion\":\"2.0.1-2\", \"notifPhoneNumber\":\"\", \"enableNotif\":false, \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFhQGJiLmNjIiwidXNlcm5hbWUiOiIiLCJpZCI6IjVjYjUyMzc5YTI4NmIyNGRhMDI5YTAzYSIsInJvbGUiOiJkb2N0b3IiLCJmaXJzdE5hbWUiOiJNdWhhbW1lZCIsImxhc3ROYW1lIjoiRGV2IiwicGhvbmVOdW1iZXIiOiIrMjAxMDY1MjM0Mjc4IiwiYXV0aFBob25lTnVtYmVyIjoiKzIwMTA2NTIzNDI4OSIsInZpZXdBbGxRdWV1ZXMiOnRydWUsImRvY3RvckNsaWVudFZlcnNpb24iOiIyLjAuMS0yIiwibm90aWZQaG9uZU51bWJlciI6IiIsImVuYWJsZU5vdGlmIjpmYWxzZSwiaWF0IjoxNjExMTUyNjc0fQ.sACTa5rpQKO3rURuPgB4oRzBwa2rrO3fiAFNsasVTu4\" } } Invite management Invite creation on behalf of doctor An invitation is a link allowing a patient to request a consultation. Method and URL POST /api/v1/invite Payload { \"emailAddress\":\"super.patient@example.com\", \"phoneNumber\":\"+41 123 456 789\", \"language\":\"fr\", \"doctorLanguage\":null, \"doctorEmail\": \"super.doctor@example.com\", \"firstName\":\"Paul\", \"lastName\":\"Dupont\", \"gender\":\"male\", \"isPatientInvite\":true, \"sendInvite\": true } Note: only one of phoneNumber or emailAddress is required. phoneNumber : mobile phone number in international format of the patient. This will only be useful if the invitation is to be resent to the patient. emailAddress : in the event that the patient does not have a mobile number, it is also possible to send him the invitation by email. scheduledFor : date and time in ISO format of the date on which the consultation should take place. language : patient's language, encoded on two characters doctorEmail : email from the doctor's account to which the consultation request will be associated. firstName : first name of the patient displayed in the consultation request. lastName : patient's last name displayed in the consultation request. gender : patient sex displayed in the consultation request (male or female) isPatientInvite : it must always be set to true because we are here in the case of a patient invitation. sendInvite (optional, default false) : does HUG@Home must take care of sending link to patient by SMS or Email (otherwise API will just return the link). Response Expected answer : 200 (OK) { \"success\": true, \"invite\": { \"createdAt\": 1610038815110, \"updatedAt\": 1610038815110, \"id\": \"5ff73e1f8f2e5c552b287ff9\", \"firstName\": \"Olivier\", \"lastName\": \"Bitsch\", \"gender\": \"male\", \"phoneNumber\": \"\", \"emailAddress\": \"olivier.b@iabsis.com\", \"status\": \"SENT\", \"scheduledFor\": 1610124899000, \"type\": \"PATIENT\", \"patientLanguage\": \"fr\", \"doctorLanguage\": \"\", \"guestEmailAddress\": \"\", \"guestPhoneNumber\": \"\", \"queue\": null, \"invitedBy\": \"5fac3a1a86668e782041ea70\", \"patientInvite\": null, \"translationOrganization\": null, \"translator\": null, \"translatorRequestInvite\": null, \"translatorInvite\": null, \"guestInvite\": null \"patientURL\": \"https://app.hug-at-home.ch/...\", \"doctorURL\": \"https://hug-at-home.ch/...\" } } Invite creation assigned to a queue An invitation is a link allowing a patient to request a consultation. Method and URL POST /api/v1/invite Payload { \"emailAddress\":\"\", \"phoneNumber\":\"+41 123 456 789\", \"scheduledFor\":\"2021-01-08T16:54:59.000Z\", \"language\":\"fr\", \"doctorLanguage\":null, \"queue\": \"Queue name\", \"firstName\":\"Paul\", \"lastName\":\"Dupont\", \"gender\":\"male\", \"isPatientInvite\":true } queue : queue name or id Refer to the previous section for the other fields. Retrieve the information of an invitation This allows you to retrieve the information from an invitation again. Method and URL GET /api/v1/invite/{ID} Delete an invitation This removes the patient invitation. This request is no longer possible when the patient has requested a consultation. Method and URL DELETE /api/v1/invite/{ID} Invite update This changes the patient invitation. Method and URL PATCH /api/v1/invite/{ID} For the content, refer to the creation Retrieve information from a consultation Once an invitation has been used by a patient, it is possible to retrieve information concerning it. Warning !! this automatically closes the consultation and patient/doctor will not able to use it anymore !! POST /api/v1/invite/{ID}/consultation/close Response { \"_id\": \"6005b7c37e71bb4c879ff56a\", \"queue\": \"5e6df5c63f25c958e1f43c30\", \"gender\": \"male\", \"IMADTeam\": \"none\", \"invitationToken\": \"b531e8f67d24546d0bf0348b97518977261e732c\", \"status\": \"closed\", \"owner\": \"5cb52379a286b24da029a03a\", \"firstName\": \"Muhammed\", \"lastName\": \"abozaid\", \"invitedBy\": \"5cb52379a286b24da029a03a\", \"invite\": \"6005b7b77e71bb4c879ff569\", \"createdAt\": 1610987459810, \"updatedAt\": 1611044353974, \"birthDate\": \"\", \"type\": \"\", \"acceptedBy\": null, \"translator\": null, \"guest\": null, \"acceptedAt\": 0, \"closedAt\": 0, \"patientRating\": \"\", \"patientComment\": \"\", \"doctorRating\": \"\", \"doctorComment\": \"\", \"flagPatientOnline\": false, \"flagGuestOnline\": false, \"flagTranslatorOnline\": false, \"flagDoctorOnline\": true, \"scheduledFor\": 0 } Single Sign-On service This process permit to issue JWT token thanks to a shared key. This endpoint requires to have SHARED_EXTERNAL_AUTH_SECRET variable defined into backend. Create a JWT token containing the following content, use the shared key previously defined. { \"email\":\"email\", \"timestamp\": {timestamp} } email: email you want to login as timestamp: timestamp not later than 5 minutes Use the following POST URL to authenticate user. POST : /api/v1/external-auth-callback?token={JWT}&returnUrl={URL} JWT : token previously created URL : optional redirect URL, otherwise return to user Dashboard.","title":"API documentation"},{"location":"api/#api-documentation","text":"Warning, this guide will help integration any kind of form, but is probably incomplete. If you looks for all possible endpoint, you might try with Bruno This guide provide you some endpoint documentation with sample of how to use HCW@Home API.","title":"API documentation"},{"location":"api/#response-format","text":"Our API is very standard and returns http code in response of all requests: 200 : everything went well 400 : malformed request 401 : unauthorized request 500 : server error","title":"Response format"},{"location":"api/#authenticate-as-service-account","text":"An account must be created with scheduler role. This specific user can bypass the 2FA auth. Authentication is done via an email and a password. The application returns a jwt token stored in the cookies. The header x-access-token must be defined with the returned JWT.","title":"Authenticate as service account"},{"location":"api/#method-and-url","text":"POST : /api/v1/login-local","title":"Method and URL"},{"location":"api/#payload","text":"{ \"email\": \"sample-user@test.com\", \"password\": \"123456890-very-long-password\" } email : HCW login password : HCW password","title":"Payload"},{"location":"api/#response","text":"{ \"message\":\"Login Successful\", \"user\":{ \"email\":\"aa@bb.cc\", \"username\":\"\", \"id\":\"5cb52379a286b24da029a03a\", \"role\":\"scheduler\", \"firstName\":\"Muhammed\", \"lastName\":\"Dev\", \"phoneNumber\":\"+201065234278\", \"authPhoneNumber\":\"+201065234289\", \"viewAllQueues\":true, \"doctorClientVersion\":\"2.0.1-2\", \"notifPhoneNumber\":\"\", \"enableNotif\":false, \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFhQGJiLmNjIiwidXNlcm5hbWUiOiIiLCJpZCI6IjVjYjUyMzc5YTI4NmIyNGRhMDI5YTAzYSIsInJvbGUiOiJkb2N0b3IiLCJmaXJzdE5hbWUiOiJNdWhhbW1lZCIsImxhc3ROYW1lIjoiRGV2IiwicGhvbmVOdW1iZXIiOiIrMjAxMDY1MjM0Mjc4IiwiYXV0aFBob25lTnVtYmVyIjoiKzIwMTA2NTIzNDI4OSIsInZpZXdBbGxRdWV1ZXMiOnRydWUsImRvY3RvckNsaWVudFZlcnNpb24iOiIyLjAuMS0yIiwibm90aWZQaG9uZU51bWJlciI6IiIsImVuYWJsZU5vdGlmIjpmYWxzZSwiaWF0IjoxNjExMTUyNjc0fQ.sACTa5rpQKO3rURuPgB4oRzBwa2rrO3fiAFNsasVTu4\" } }","title":"Response"},{"location":"api/#invite-management","text":"","title":"Invite management"},{"location":"api/#invite-creation-on-behalf-of-doctor","text":"An invitation is a link allowing a patient to request a consultation.","title":"Invite creation on behalf of doctor"},{"location":"api/#method-and-url_1","text":"POST /api/v1/invite","title":"Method and URL"},{"location":"api/#payload_1","text":"{ \"emailAddress\":\"super.patient@example.com\", \"phoneNumber\":\"+41 123 456 789\", \"language\":\"fr\", \"doctorLanguage\":null, \"doctorEmail\": \"super.doctor@example.com\", \"firstName\":\"Paul\", \"lastName\":\"Dupont\", \"gender\":\"male\", \"isPatientInvite\":true, \"sendInvite\": true } Note: only one of phoneNumber or emailAddress is required. phoneNumber : mobile phone number in international format of the patient. This will only be useful if the invitation is to be resent to the patient. emailAddress : in the event that the patient does not have a mobile number, it is also possible to send him the invitation by email. scheduledFor : date and time in ISO format of the date on which the consultation should take place. language : patient's language, encoded on two characters doctorEmail : email from the doctor's account to which the consultation request will be associated. firstName : first name of the patient displayed in the consultation request. lastName : patient's last name displayed in the consultation request. gender : patient sex displayed in the consultation request (male or female) isPatientInvite : it must always be set to true because we are here in the case of a patient invitation. sendInvite (optional, default false) : does HUG@Home must take care of sending link to patient by SMS or Email (otherwise API will just return the link).","title":"Payload"},{"location":"api/#response_1","text":"Expected answer : 200 (OK) { \"success\": true, \"invite\": { \"createdAt\": 1610038815110, \"updatedAt\": 1610038815110, \"id\": \"5ff73e1f8f2e5c552b287ff9\", \"firstName\": \"Olivier\", \"lastName\": \"Bitsch\", \"gender\": \"male\", \"phoneNumber\": \"\", \"emailAddress\": \"olivier.b@iabsis.com\", \"status\": \"SENT\", \"scheduledFor\": 1610124899000, \"type\": \"PATIENT\", \"patientLanguage\": \"fr\", \"doctorLanguage\": \"\", \"guestEmailAddress\": \"\", \"guestPhoneNumber\": \"\", \"queue\": null, \"invitedBy\": \"5fac3a1a86668e782041ea70\", \"patientInvite\": null, \"translationOrganization\": null, \"translator\": null, \"translatorRequestInvite\": null, \"translatorInvite\": null, \"guestInvite\": null \"patientURL\": \"https://app.hug-at-home.ch/...\", \"doctorURL\": \"https://hug-at-home.ch/...\" } }","title":"Response"},{"location":"api/#invite-creation-assigned-to-a-queue","text":"An invitation is a link allowing a patient to request a consultation.","title":"Invite creation assigned to a queue"},{"location":"api/#method-and-url_2","text":"POST /api/v1/invite","title":"Method and URL"},{"location":"api/#payload_2","text":"{ \"emailAddress\":\"\", \"phoneNumber\":\"+41 123 456 789\", \"scheduledFor\":\"2021-01-08T16:54:59.000Z\", \"language\":\"fr\", \"doctorLanguage\":null, \"queue\": \"Queue name\", \"firstName\":\"Paul\", \"lastName\":\"Dupont\", \"gender\":\"male\", \"isPatientInvite\":true } queue : queue name or id Refer to the previous section for the other fields.","title":"Payload"},{"location":"api/#retrieve-the-information-of-an-invitation","text":"This allows you to retrieve the information from an invitation again.","title":"Retrieve the information of an invitation"},{"location":"api/#method-and-url_3","text":"GET /api/v1/invite/{ID}","title":"Method and URL"},{"location":"api/#delete-an-invitation","text":"This removes the patient invitation. This request is no longer possible when the patient has requested a consultation.","title":"Delete an invitation"},{"location":"api/#method-and-url_4","text":"DELETE /api/v1/invite/{ID}","title":"Method and URL"},{"location":"api/#invite-update","text":"This changes the patient invitation.","title":"Invite update"},{"location":"api/#method-and-url_5","text":"PATCH /api/v1/invite/{ID} For the content, refer to the creation","title":"Method and URL"},{"location":"api/#retrieve-information-from-a-consultation","text":"Once an invitation has been used by a patient, it is possible to retrieve information concerning it. Warning !! this automatically closes the consultation and patient/doctor will not able to use it anymore !! POST /api/v1/invite/{ID}/consultation/close","title":"Retrieve information from a consultation"},{"location":"api/#response_2","text":"{ \"_id\": \"6005b7c37e71bb4c879ff56a\", \"queue\": \"5e6df5c63f25c958e1f43c30\", \"gender\": \"male\", \"IMADTeam\": \"none\", \"invitationToken\": \"b531e8f67d24546d0bf0348b97518977261e732c\", \"status\": \"closed\", \"owner\": \"5cb52379a286b24da029a03a\", \"firstName\": \"Muhammed\", \"lastName\": \"abozaid\", \"invitedBy\": \"5cb52379a286b24da029a03a\", \"invite\": \"6005b7b77e71bb4c879ff569\", \"createdAt\": 1610987459810, \"updatedAt\": 1611044353974, \"birthDate\": \"\", \"type\": \"\", \"acceptedBy\": null, \"translator\": null, \"guest\": null, \"acceptedAt\": 0, \"closedAt\": 0, \"patientRating\": \"\", \"patientComment\": \"\", \"doctorRating\": \"\", \"doctorComment\": \"\", \"flagPatientOnline\": false, \"flagGuestOnline\": false, \"flagTranslatorOnline\": false, \"flagDoctorOnline\": true, \"scheduledFor\": 0 }","title":"Response"},{"location":"api/#single-sign-on-service","text":"This process permit to issue JWT token thanks to a shared key. This endpoint requires to have SHARED_EXTERNAL_AUTH_SECRET variable defined into backend. Create a JWT token containing the following content, use the shared key previously defined. { \"email\":\"email\", \"timestamp\": {timestamp} } email: email you want to login as timestamp: timestamp not later than 5 minutes Use the following POST URL to authenticate user. POST : /api/v1/external-auth-callback?token={JWT}&returnUrl={URL} JWT : token previously created URL : optional redirect URL, otherwise return to user Dashboard.","title":"Single Sign-On service"},{"location":"bruno/","text":"Debug API with Bruno Bruno is a Fast and Git-Friendly Opensource API client, aimed at revolutionizing the status quo represented by Postman, Insomnia and similar tools out there. Install Bruno You can easily download and install Bruno on your computer from the official Bruno website. It's also a free and open source software. https://www.usebruno.com/downloads The Bruno projects can be opened from the doc/HCW@Home folder from https://github.com/hcw-home/backend (HCW@Home Backend) Github project. Open Bruno on your computer, then click on Collection menu and Open Collection. Browse the folder where you dowloaded the Backend files and browse into doc/HCW@Home folder. Configure environement Now you have the Bruno project opened, click on No environment from the top right of the menu and choose Configure. Define the various information related to your project (BASE_URI, EMAIL and PASS). Click on Save. Now close the modal, and choose your configured environment Development (Admin) from the top right menu. Run request You are now ready to login with HCW@Home\\LOGIN\\Login local and hen run any requests.","title":"Debug API with Bruno"},{"location":"bruno/#debug-api-with-bruno","text":"Bruno is a Fast and Git-Friendly Opensource API client, aimed at revolutionizing the status quo represented by Postman, Insomnia and similar tools out there.","title":"Debug API with Bruno"},{"location":"bruno/#install-bruno","text":"You can easily download and install Bruno on your computer from the official Bruno website. It's also a free and open source software. https://www.usebruno.com/downloads The Bruno projects can be opened from the doc/HCW@Home folder from https://github.com/hcw-home/backend (HCW@Home Backend) Github project. Open Bruno on your computer, then click on Collection menu and Open Collection. Browse the folder where you dowloaded the Backend files and browse into doc/HCW@Home folder.","title":"Install Bruno"},{"location":"bruno/#configure-environement","text":"Now you have the Bruno project opened, click on No environment from the top right of the menu and choose Configure. Define the various information related to your project (BASE_URI, EMAIL and PASS). Click on Save. Now close the modal, and choose your configured environment Development (Admin) from the top right menu.","title":"Configure environement"},{"location":"bruno/#run-request","text":"You are now ready to login with HCW@Home\\LOGIN\\Login local and hen run any requests.","title":"Run request"},{"location":"configure-notification/","text":"Configure notification Whenever a patient comes into the Waiting queue, your browser will notify you with a notification sound. You can visually see that somebody is waiting from Dashboard or Waiting queue page. But in the event of you didn't kept your browser opened, you may easily miss that a patient is waiting. In that situation, you can enable HCW@Home SMS notification very easily. From any page, click on your name available on top of the screen. This will open a small menu, then click on Profile. Beside SMS notification , put any mobile phone number when HCW@Home must send the notification. Toggle the Enable switch to enable the notification. Now as soon a patient is in waiting queue, you will receive this kind of notification. Provide estimated waiting time to patient When you handle approximate appointement to your patient, or when you use external form so patient can reach Waiting queue any time, it might be usefull to provide estimated waiting time to your patient. First, ensure you have enable SMS notification when patient reach the waiting queue. Once you received the SMS, click on the link provided. You will get a simple page useful to provide estimated time. Your patient will receive automatically a message from your with your estimated waiting time.","title":"Additional notifications"},{"location":"configure-notification/#configure-notification","text":"Whenever a patient comes into the Waiting queue, your browser will notify you with a notification sound. You can visually see that somebody is waiting from Dashboard or Waiting queue page. But in the event of you didn't kept your browser opened, you may easily miss that a patient is waiting. In that situation, you can enable HCW@Home SMS notification very easily. From any page, click on your name available on top of the screen. This will open a small menu, then click on Profile. Beside SMS notification , put any mobile phone number when HCW@Home must send the notification. Toggle the Enable switch to enable the notification. Now as soon a patient is in waiting queue, you will receive this kind of notification.","title":"Configure notification"},{"location":"configure-notification/#provide-estimated-waiting-time-to-patient","text":"When you handle approximate appointement to your patient, or when you use external form so patient can reach Waiting queue any time, it might be usefull to provide estimated waiting time to your patient. First, ensure you have enable SMS notification when patient reach the waiting queue. Once you received the SMS, click on the link provided. You will get a simple page useful to provide estimated time. Your patient will receive automatically a message from your with your estimated waiting time.","title":"Provide estimated waiting time to patient"},{"location":"customize/","text":"How to customize HCW@Home Since version 5.0, it's possible to customize the interface of HCW@Home. The following components can be customized: The logo: displayed on the home page and login page of patient interface. displayed on the doctor application. The primary color: display in various location of both patient and doctor interface. The primary color can be chosen for each interface. The Home page message: Visible on the left pane of the patient page screen. The Login page message: Visible on the left pane of the consultation requester login page. The terms and conditions: Visible on consultation requester account register page. Visible on the patient home page. Configure the logo The logo must be a browser compatible image (png, svg, jpg, ...) and is simply configured into backend. LOGO=<url> The URL can be relative (e.g if you upload in a folder of the doctor or patient app), or absolute (the logo is hosted somewhere else). By example with Debian package, you can put into /etc/hcw-athome/hcw-athome.conf. LOGO=/assets/logo.png Then place the logo into the following folder: patient: /usr/share/hcw-athome/patient/assets/logo.png doctor: /usr/share/hcw-athome/caregiver/assets/logo.png Note 1 : You can have different logo this way. If you put the full URL, the same logo will be used for doctor and patient interface. Note 2 : The admin interface doesn't have any possible customization yet. Configure the primary color The primary color change the accent color into patient and doctor interface. Patient and doctor interfaces can have different color if required. The color is configured in the backend: DOCTOR_APP_PRIMARY_COLOR=#523C3D PATIENT_APP_PRIMARY_COLOR=#523C3D The color of the app. Change the branding name Branding ensures that patient is using the right instance and also limit the risk of scamming. This branding is used into SMS and patient application. BRANDING=HCW@Home Here a sample how mail is changed with this branding.","title":"Customize HCW@Home"},{"location":"customize/#how-to-customize-hcwhome","text":"Since version 5.0, it's possible to customize the interface of HCW@Home. The following components can be customized: The logo: displayed on the home page and login page of patient interface. displayed on the doctor application. The primary color: display in various location of both patient and doctor interface. The primary color can be chosen for each interface. The Home page message: Visible on the left pane of the patient page screen. The Login page message: Visible on the left pane of the consultation requester login page. The terms and conditions: Visible on consultation requester account register page. Visible on the patient home page.","title":"How to customize HCW@Home"},{"location":"customize/#configure-the-logo","text":"The logo must be a browser compatible image (png, svg, jpg, ...) and is simply configured into backend. LOGO=<url> The URL can be relative (e.g if you upload in a folder of the doctor or patient app), or absolute (the logo is hosted somewhere else). By example with Debian package, you can put into /etc/hcw-athome/hcw-athome.conf. LOGO=/assets/logo.png Then place the logo into the following folder: patient: /usr/share/hcw-athome/patient/assets/logo.png doctor: /usr/share/hcw-athome/caregiver/assets/logo.png Note 1 : You can have different logo this way. If you put the full URL, the same logo will be used for doctor and patient interface. Note 2 : The admin interface doesn't have any possible customization yet.","title":"Configure the logo"},{"location":"customize/#configure-the-primary-color","text":"The primary color change the accent color into patient and doctor interface. Patient and doctor interfaces can have different color if required. The color is configured in the backend: DOCTOR_APP_PRIMARY_COLOR=#523C3D PATIENT_APP_PRIMARY_COLOR=#523C3D The color of the app.","title":"Configure the primary color"},{"location":"customize/#change-the-branding-name","text":"Branding ensures that patient is using the right instance and also limit the risk of scamming. This branding is used into SMS and patient application. BRANDING=HCW@Home Here a sample how mail is changed with this branding.","title":"Change the branding name"},{"location":"debian/","text":"Debian/Ubuntu installation External repository setup HCW@Home relies on third party repositories as there is no recent version of mongo or nodejs into official repositories. apt install curl gnupg ca-certificates lsb-release # NodeJS Repository NAME=nodejs VERSION=16 KEY_URL=\"https://deb.nodesource.com/gpgkey/nodesource.gpg.key\" APT_URL=\"https://deb.nodesource.com/node_${VERSION}.x $(lsb_release -sc) main\" PACKAGE=nodejs curl -fsSL ${KEY_URL} | gpg -o /etc/apt/trusted.gpg.d/${PACKAGE}.gpg --dearmor echo \"deb [signed-by=/etc/apt/trusted.gpg.d/${PACKAGE}.gpg] ${APT_URL}\" > /etc/apt/sources.list.d/${NAME}.list apt update apt install ${PACKAGE} # MongoDB Repository NAME=mongodb VERSION=6.0 DIST_NAME=$(lsb_release -si) COMPONENT=$(if [ ${DIST_NAME} == \"Ubuntu\" ] ; then echo \"multiverse\" ; else echo \"main\" ; fi ) KEY_URL=\"https://www.mongodb.org/static/pgp/server-${VERSION}.asc\" APT_URL=\"http://repo.mongodb.org/apt/${DIST_NAME,} $(lsb_release -sc)/mongodb-org/${VERSION} ${COMPONENT}\" PACKAGE=mongodb-org curl -fsSL ${KEY_URL} | gpg -o /etc/apt/trusted.gpg.d/${PACKAGE}.gpg --dearmor echo \"deb [signed-by=/etc/apt/trusted.gpg.d/${PACKAGE}.gpg] ${APT_URL}\" > /etc/apt/sources.list.d/${NAME}.list apt update apt install ${PACKAGE} systemctl enable --now mongod After those commands are done, you should have up and running mongo service. Install Redis Redis is an on memory database, it's used to temporary store information like session. Installation of redis server must be shared between backends (if several one are deployed), but we are assuming here we are installing on one server. The installation is very simple: apt install redis-server Install antivirus Antivirus limits the risk to propagate malware through HCW@Home. It will check any attachments give by patient or doctor during the consultation. Antivirus can be install on same server or on external server. apt install clamav-daemon Check that service is up. systemctl start clamav-daemon systemctl status clamav-daemon Install coturn server Coturn is an open-source project that provides a TURN and STUN server implementation. Both TURN and STUN are protocols that help in NAT traversal for WebRTC applications. Coturn setup can be achieve in different mode, we assume that we are installing on same server than Backend, but it's strongly recommanded to install on different server. apt install coturn Now adjust the file /etc/turnserver.conf like this. # Enable only if your server is behind a NAT. external-ip=<you machine ip> # Adjust only if you want to use another port. listening-port=3478 # Ensure to enable fingerprint and long term credential. fingerprint lt-cred-mech # Adjust the port range that turn is allowed to use. The port range must be opened from the # firewall as UDP and TCP. max-port=65535 min-port=49152 # Choose a realm, can be formatted like iabsis.com realm=<domain> # Configure a user and a password, this is required to be # allowed to use the turn relay capabilities. <user>:<password> user=myuser:mypass If you don't want to put clear password in configuration file, you can encode the password with the following command. turnadmin -k -u <user> -r <realm> -p <pass> This command returns an encoded password starting by 0xabc..., replace mypass by the returned value, ensure to keep 0x in front of the password. user=myuser:0xabc... Keep in mind this user and password configured here as it will be used later by Mediasoup server. Install HCW@Home repository and package HCW@Home is composed of four main components: One Backend One Frontend dedicated for Doctors One Frontend dedicated for Patient One Frontend dedicated for Administrators Those components can be installed on same server or on differents one. Here we will explain how to install on same server. cat > /etc/apt/sources.list.d/hcw.list << EOF deb [arch=amd64 trusted=yes] https://projects.iabsis.com/repository/hcw-backend/debian focal main deb [arch=amd64 trusted=yes] https://projects.iabsis.com/repository/hcw-patient/debian focal main deb [arch=amd64 trusted=yes] https://projects.iabsis.com/repository/hcw-doctor/debian focal main deb [arch=amd64 trusted=yes] https://projects.iabsis.com/repository/hcw-admin/debian focal main EOF Now, refresh the list of packages with the following command. apt update Finally, you can install the thre component on one command apt install hcw-athome-patient hcw-athome-backend hcw-athome-caregiver hcw-athome-admin Install and configure web server Now you have an up and running HCW@Home system, you must install a web server. We tested Nginx web server even if it should work with others like Apache. Installation of Nginx is straight forward apt install nginx If you don't have reverse proxy server in front of your Nginx, you might need to install certbot for issuing SSL certificates. You can install the following package apt install python3-certbot-nginx By default, HCW@Home doesn't install Nginx configuration, but you can use the ready configuration from doc folder. Don't forget to adjust the configuration based on your needs. wget https://raw.githubusercontent.com/HCW-home/frontend-patient/master/nginx-docker.conf.template -O /etc/nginx/sites-enabled/hcw-patient.conf wget https://raw.githubusercontent.com/HCW-home/frontend-patient/master/nginx-docker.conf.template -O /etc/nginx/sites-enabled/hcw-doctor.conf wget https://raw.githubusercontent.com/HCW-home/frontend-patient/master/nginx-docker.conf.template -O /etc/nginx/sites-enabled/hcw-admin.conf rm /etc/nginx/sites-enabled/default Update the files : listen 80; server_name <replace by your domain>; root /usr/share/hcw-athome/admin; # or patient or caregiver for depending of config file you are updating; ... proxy_pass http://127.0.0.1:1337; # Update 127.0.0.1 if installed on same server, or different IP if separate sever. The last command removes the fallback default configuration provided by Nginx. If you now want to issue certificate, run the following command and follow the usual cerbot process. If you need more information about this process, read the official documentation: https://certbot.eff.org/ certbot --nginx Configure HCW@Home Now that every component are ready, we can update the main configuration file /etc/hcw-athome/hcw-athome.conf. Most of the part are self explanatory, you are free to adjust according to your specific configuration. Also adjust the socket or port Clamav can be reached. If you use socket, you might need to first add HCW@Home system user to Clamav group to be able to communicate with the Daemon. adduser hcwhome clamav Check now the socket path, by default it should be /var/run/clamav/clamd.ctl, so you can adjust this path in HCW@home configuration with this command. sed -i 's|/var/run/clamd.scan/clamd.sock|/var/run/clamav/clamd.ctl|g' /etc/hcw-athome/hcw-athome.conf Once updated, you can restart and check for logs with the following commands. systemctl enable --now hcw-athome or systemctl restart hcw-athome Check logs journalctl -f -u hcw-athome -n 200 If you see the following line, it means your server is ready. Aug 23 13:15:33 hcw-athome-dev node[546330]: debug: ------------------------------------------------------- Aug 23 13:15:33 hcw-athome-dev node[546330]: debug: :: Wed Aug 23 2023 13:15:33 GMT+0000 (Coordinated Universal Time) Aug 23 13:15:33 hcw-athome-dev node[546330]: debug: Environment : production Aug 23 13:15:33 hcw-athome-dev node[546330]: debug: Port : 1337 Aug 23 13:15:33 hcw-athome-dev node[546330]: debug: ------------------------------------------------------- Create first admin account You must have a least one admin account before being able to login on the admin interface (then being able to create other user). Create the first user with mongo request. mongosh use hcw-athome; db.user.insertOne({email:\"admin@example.com\", firstName:\"Admin\", lastName:\"\", role: \"admin\", createdAt: new Date().getTime(), password: \"$2b$10$uip0TKwn.kbO1s1C3jO0au4ymxjkgd.kg9ueH2oV02I4gJBKzH.2m\", \"updatedAt\": new Date().getTime(), \"username\" : \"admin@example.com\", phoneNumber: \"\"}) This command will create user with login \"admin@example.com\" and password \"admin\". If you need to customize this passsword and you have nodejs installed (or you do on your server), you can use the following script, by example into password.js, don't forgot to update 'not hashed password'. const bcrypt = require('bcrypt'); bcrypt.hash('not hashed password', 10, function(err, hash) { if(err) console.log(err) console.log(hash); }); You will need to install bcrypt with the following command. npm install bcrypt Then run the script with: node password.js Install Media server with Mediasoup Mediasoup is a media server used to send flow between participant. cat > /etc/apt/sources.list.d/mediasoup.list << EOF deb [trusted=yes] https://projects.iabsis.com/repository/mediasoup-api/debian bullseye main EOF Refresh the list of available package. apt update Now install the package apt install mediasoup-api Now adjust the file /etc/mediasoup-api/mediasoup-api.conf, don't forgot to define the following lines with your coturn configuration previously defined. TURN_SERVER1=turn:turn.example.com/?transport=udp TURN_USERNAME1=myuser TURN_PASSWORD1=mypwd Most values are self explanatory, once you done your changes, restart the service with the following command. systemctl status mediasoup-api If you prefer want to serve Mediasoup API with Nginx (recommanded), you can create a new Nginx file (by example /etc/nginx/sites-enabled/mediasoup.conf) and use the following template. map $http_upgrade $connection_upgrade { default upgrade; '' close; } server { server_name <domain>; location / { proxy_set_header Host $host; proxy_pass https://localhost:3443; proxy_set_header X-Forwarded-For $remote_addr; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Port $server_port; proxy_connect_timeout 120m; proxy_send_timeout 120m; proxy_read_timeout 120m; } listen 80; } Don't forget to update the part. If you need to issue certbot certificate, use again the following command. certbot --nginx Mediasoup declaration in HCW@Home If you have only one mediasoup server, you can simply configure it into HCW@Home configuration file. #/etc/hcw-athome/hcw-athome.conf MEDIASOUP_URL=https://<replace-by-my-domain> MEDIASOUP_USER=abcd MEDIASOUP_SECRET=1234 If you have more than one server, you can add all from admin interface from \"Mediasoup\" menu.","title":"Install on Debian/Ubuntu"},{"location":"debian/#debianubuntu-installation","text":"","title":"Debian/Ubuntu installation"},{"location":"debian/#external-repository-setup","text":"HCW@Home relies on third party repositories as there is no recent version of mongo or nodejs into official repositories. apt install curl gnupg ca-certificates lsb-release # NodeJS Repository NAME=nodejs VERSION=16 KEY_URL=\"https://deb.nodesource.com/gpgkey/nodesource.gpg.key\" APT_URL=\"https://deb.nodesource.com/node_${VERSION}.x $(lsb_release -sc) main\" PACKAGE=nodejs curl -fsSL ${KEY_URL} | gpg -o /etc/apt/trusted.gpg.d/${PACKAGE}.gpg --dearmor echo \"deb [signed-by=/etc/apt/trusted.gpg.d/${PACKAGE}.gpg] ${APT_URL}\" > /etc/apt/sources.list.d/${NAME}.list apt update apt install ${PACKAGE} # MongoDB Repository NAME=mongodb VERSION=6.0 DIST_NAME=$(lsb_release -si) COMPONENT=$(if [ ${DIST_NAME} == \"Ubuntu\" ] ; then echo \"multiverse\" ; else echo \"main\" ; fi ) KEY_URL=\"https://www.mongodb.org/static/pgp/server-${VERSION}.asc\" APT_URL=\"http://repo.mongodb.org/apt/${DIST_NAME,} $(lsb_release -sc)/mongodb-org/${VERSION} ${COMPONENT}\" PACKAGE=mongodb-org curl -fsSL ${KEY_URL} | gpg -o /etc/apt/trusted.gpg.d/${PACKAGE}.gpg --dearmor echo \"deb [signed-by=/etc/apt/trusted.gpg.d/${PACKAGE}.gpg] ${APT_URL}\" > /etc/apt/sources.list.d/${NAME}.list apt update apt install ${PACKAGE} systemctl enable --now mongod After those commands are done, you should have up and running mongo service.","title":"External repository setup"},{"location":"debian/#install-redis","text":"Redis is an on memory database, it's used to temporary store information like session. Installation of redis server must be shared between backends (if several one are deployed), but we are assuming here we are installing on one server. The installation is very simple: apt install redis-server","title":"Install Redis"},{"location":"debian/#install-antivirus","text":"Antivirus limits the risk to propagate malware through HCW@Home. It will check any attachments give by patient or doctor during the consultation. Antivirus can be install on same server or on external server. apt install clamav-daemon Check that service is up. systemctl start clamav-daemon systemctl status clamav-daemon","title":"Install antivirus"},{"location":"debian/#install-coturn-server","text":"Coturn is an open-source project that provides a TURN and STUN server implementation. Both TURN and STUN are protocols that help in NAT traversal for WebRTC applications. Coturn setup can be achieve in different mode, we assume that we are installing on same server than Backend, but it's strongly recommanded to install on different server. apt install coturn Now adjust the file /etc/turnserver.conf like this. # Enable only if your server is behind a NAT. external-ip=<you machine ip> # Adjust only if you want to use another port. listening-port=3478 # Ensure to enable fingerprint and long term credential. fingerprint lt-cred-mech # Adjust the port range that turn is allowed to use. The port range must be opened from the # firewall as UDP and TCP. max-port=65535 min-port=49152 # Choose a realm, can be formatted like iabsis.com realm=<domain> # Configure a user and a password, this is required to be # allowed to use the turn relay capabilities. <user>:<password> user=myuser:mypass If you don't want to put clear password in configuration file, you can encode the password with the following command. turnadmin -k -u <user> -r <realm> -p <pass> This command returns an encoded password starting by 0xabc..., replace mypass by the returned value, ensure to keep 0x in front of the password. user=myuser:0xabc... Keep in mind this user and password configured here as it will be used later by Mediasoup server.","title":"Install coturn server"},{"location":"debian/#install-hcwhome-repository-and-package","text":"HCW@Home is composed of four main components: One Backend One Frontend dedicated for Doctors One Frontend dedicated for Patient One Frontend dedicated for Administrators Those components can be installed on same server or on differents one. Here we will explain how to install on same server. cat > /etc/apt/sources.list.d/hcw.list << EOF deb [arch=amd64 trusted=yes] https://projects.iabsis.com/repository/hcw-backend/debian focal main deb [arch=amd64 trusted=yes] https://projects.iabsis.com/repository/hcw-patient/debian focal main deb [arch=amd64 trusted=yes] https://projects.iabsis.com/repository/hcw-doctor/debian focal main deb [arch=amd64 trusted=yes] https://projects.iabsis.com/repository/hcw-admin/debian focal main EOF Now, refresh the list of packages with the following command. apt update Finally, you can install the thre component on one command apt install hcw-athome-patient hcw-athome-backend hcw-athome-caregiver hcw-athome-admin","title":"Install HCW@Home repository and package"},{"location":"debian/#install-and-configure-web-server","text":"Now you have an up and running HCW@Home system, you must install a web server. We tested Nginx web server even if it should work with others like Apache. Installation of Nginx is straight forward apt install nginx If you don't have reverse proxy server in front of your Nginx, you might need to install certbot for issuing SSL certificates. You can install the following package apt install python3-certbot-nginx By default, HCW@Home doesn't install Nginx configuration, but you can use the ready configuration from doc folder. Don't forget to adjust the configuration based on your needs. wget https://raw.githubusercontent.com/HCW-home/frontend-patient/master/nginx-docker.conf.template -O /etc/nginx/sites-enabled/hcw-patient.conf wget https://raw.githubusercontent.com/HCW-home/frontend-patient/master/nginx-docker.conf.template -O /etc/nginx/sites-enabled/hcw-doctor.conf wget https://raw.githubusercontent.com/HCW-home/frontend-patient/master/nginx-docker.conf.template -O /etc/nginx/sites-enabled/hcw-admin.conf rm /etc/nginx/sites-enabled/default Update the files : listen 80; server_name <replace by your domain>; root /usr/share/hcw-athome/admin; # or patient or caregiver for depending of config file you are updating; ... proxy_pass http://127.0.0.1:1337; # Update 127.0.0.1 if installed on same server, or different IP if separate sever. The last command removes the fallback default configuration provided by Nginx. If you now want to issue certificate, run the following command and follow the usual cerbot process. If you need more information about this process, read the official documentation: https://certbot.eff.org/ certbot --nginx","title":"Install and configure web server"},{"location":"debian/#configure-hcwhome","text":"Now that every component are ready, we can update the main configuration file /etc/hcw-athome/hcw-athome.conf. Most of the part are self explanatory, you are free to adjust according to your specific configuration. Also adjust the socket or port Clamav can be reached. If you use socket, you might need to first add HCW@Home system user to Clamav group to be able to communicate with the Daemon. adduser hcwhome clamav Check now the socket path, by default it should be /var/run/clamav/clamd.ctl, so you can adjust this path in HCW@home configuration with this command. sed -i 's|/var/run/clamd.scan/clamd.sock|/var/run/clamav/clamd.ctl|g' /etc/hcw-athome/hcw-athome.conf Once updated, you can restart and check for logs with the following commands. systemctl enable --now hcw-athome or systemctl restart hcw-athome Check logs journalctl -f -u hcw-athome -n 200 If you see the following line, it means your server is ready. Aug 23 13:15:33 hcw-athome-dev node[546330]: debug: ------------------------------------------------------- Aug 23 13:15:33 hcw-athome-dev node[546330]: debug: :: Wed Aug 23 2023 13:15:33 GMT+0000 (Coordinated Universal Time) Aug 23 13:15:33 hcw-athome-dev node[546330]: debug: Environment : production Aug 23 13:15:33 hcw-athome-dev node[546330]: debug: Port : 1337 Aug 23 13:15:33 hcw-athome-dev node[546330]: debug: -------------------------------------------------------","title":"Configure HCW@Home"},{"location":"debian/#create-first-admin-account","text":"You must have a least one admin account before being able to login on the admin interface (then being able to create other user). Create the first user with mongo request. mongosh use hcw-athome; db.user.insertOne({email:\"admin@example.com\", firstName:\"Admin\", lastName:\"\", role: \"admin\", createdAt: new Date().getTime(), password: \"$2b$10$uip0TKwn.kbO1s1C3jO0au4ymxjkgd.kg9ueH2oV02I4gJBKzH.2m\", \"updatedAt\": new Date().getTime(), \"username\" : \"admin@example.com\", phoneNumber: \"\"}) This command will create user with login \"admin@example.com\" and password \"admin\". If you need to customize this passsword and you have nodejs installed (or you do on your server), you can use the following script, by example into password.js, don't forgot to update 'not hashed password'. const bcrypt = require('bcrypt'); bcrypt.hash('not hashed password', 10, function(err, hash) { if(err) console.log(err) console.log(hash); }); You will need to install bcrypt with the following command. npm install bcrypt Then run the script with: node password.js","title":"Create first admin account"},{"location":"debian/#install-media-server-with-mediasoup","text":"Mediasoup is a media server used to send flow between participant. cat > /etc/apt/sources.list.d/mediasoup.list << EOF deb [trusted=yes] https://projects.iabsis.com/repository/mediasoup-api/debian bullseye main EOF Refresh the list of available package. apt update Now install the package apt install mediasoup-api Now adjust the file /etc/mediasoup-api/mediasoup-api.conf, don't forgot to define the following lines with your coturn configuration previously defined. TURN_SERVER1=turn:turn.example.com/?transport=udp TURN_USERNAME1=myuser TURN_PASSWORD1=mypwd Most values are self explanatory, once you done your changes, restart the service with the following command. systemctl status mediasoup-api If you prefer want to serve Mediasoup API with Nginx (recommanded), you can create a new Nginx file (by example /etc/nginx/sites-enabled/mediasoup.conf) and use the following template. map $http_upgrade $connection_upgrade { default upgrade; '' close; } server { server_name <domain>; location / { proxy_set_header Host $host; proxy_pass https://localhost:3443; proxy_set_header X-Forwarded-For $remote_addr; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Port $server_port; proxy_connect_timeout 120m; proxy_send_timeout 120m; proxy_read_timeout 120m; } listen 80; } Don't forget to update the part. If you need to issue certbot certificate, use again the following command. certbot --nginx","title":"Install Media server with Mediasoup"},{"location":"debian/#mediasoup-declaration-in-hcwhome","text":"If you have only one mediasoup server, you can simply configure it into HCW@Home configuration file. #/etc/hcw-athome/hcw-athome.conf MEDIASOUP_URL=https://<replace-by-my-domain> MEDIASOUP_USER=abcd MEDIASOUP_SECRET=1234 If you have more than one server, you can add all from admin interface from \"Mediasoup\" menu.","title":"Mediasoup declaration in HCW@Home"},{"location":"deploy/","text":"HCW@Home - Simple & Secure remote consultations HCW@Home is a complete infrastructure composed of various components. This greatly simplifies the installation without the need to compile the solution. This also ensure smooth upgrades by using the usual package manager. Operating system requirements You will require at least one server running a recent version of Debian/Ubuntu. We successfully tested the setup on the following environment: Debian 10 and 11 Ubuntu 20.04, 22.04 Any linux with Docker support Hardware or virtual hardware requirements The requirement deeply depends of number of concurrency users connected in same time on the platform. The bare minimum is the following: 1Gb of RAM (a bit more if clamav is installed on same server) 1 vCPU\u200b 5Gb of Hard drive free space Domain name considerations The bare minimum domain name required by HCW@Home is three. Domain name used by Doctor interface (e.g. healthcare.<your domain>.com ) Domain name used by Patient interface(e.g. app.<your domain>.com ) Optional - Domain name used by Admin interface (e.g. admin.<your domain>.com ) Mediasoup server. (e.g. ms1.<your domain>.com ) Optional: Coturn URL (e.g. turn.<your domain>.com ) Firewall considerations It will required to open the following ports for the Frontend and Backend: Port 443 for the webserver (https) Port 80 for the redirect (http) It will required to open the following ports for the Mediasoup Port 443 for the webserver (https) Configurable UDP and TCP range, default is 40000 > 49000. It will required to open the following ports for the Turn Port 3478 for the service listening. Configurable UDP and TCP range, default is 49152 > 65535. Reverse proxy considerations HCW@Home can perfectly work behind a reverse proxy. You must ensure to have correct support for: Enable support of Websocket. Don't intercept errors. Have the Host, X-Forwarded-Host, X-Forwarded-Port, X-Forwarded-For and X-Forwarded-Proto headers correctly configured.","title":"Concept"},{"location":"deploy/#hcwhome-simple-secure-remote-consultations","text":"HCW@Home is a complete infrastructure composed of various components. This greatly simplifies the installation without the need to compile the solution. This also ensure smooth upgrades by using the usual package manager. Operating system requirements You will require at least one server running a recent version of Debian/Ubuntu. We successfully tested the setup on the following environment: Debian 10 and 11 Ubuntu 20.04, 22.04 Any linux with Docker support","title":"HCW@Home - Simple &amp; Secure remote consultations"},{"location":"deploy/#hardware-or-virtual-hardware-requirements","text":"The requirement deeply depends of number of concurrency users connected in same time on the platform. The bare minimum is the following: 1Gb of RAM (a bit more if clamav is installed on same server) 1 vCPU\u200b 5Gb of Hard drive free space","title":"Hardware or virtual hardware requirements"},{"location":"deploy/#domain-name-considerations","text":"The bare minimum domain name required by HCW@Home is three. Domain name used by Doctor interface (e.g. healthcare.<your domain>.com ) Domain name used by Patient interface(e.g. app.<your domain>.com ) Optional - Domain name used by Admin interface (e.g. admin.<your domain>.com ) Mediasoup server. (e.g. ms1.<your domain>.com ) Optional: Coturn URL (e.g. turn.<your domain>.com )","title":"Domain name considerations"},{"location":"deploy/#firewall-considerations","text":"It will required to open the following ports for the Frontend and Backend: Port 443 for the webserver (https) Port 80 for the redirect (http) It will required to open the following ports for the Mediasoup Port 443 for the webserver (https) Configurable UDP and TCP range, default is 40000 > 49000. It will required to open the following ports for the Turn Port 3478 for the service listening. Configurable UDP and TCP range, default is 49152 > 65535.","title":"Firewall considerations"},{"location":"deploy/#reverse-proxy-considerations","text":"HCW@Home can perfectly work behind a reverse proxy. You must ensure to have correct support for: Enable support of Websocket. Don't intercept errors. Have the Host, X-Forwarded-Host, X-Forwarded-Port, X-Forwarded-For and X-Forwarded-Proto headers correctly configured.","title":"Reverse proxy considerations"},{"location":"docker/","text":"How to install HCW@Home with Docker Deploy Docker Compose The following sample give you example of how deploying a coturn server with Docker Compose. Don't forget to adjust the following settings: myuser which is the login account to use turn feature mypass which is the password account to use turn feature realm which can be any name of fictive domain you choose services: coturn: image: docker.io/coturn/coturn environment: - DETECT_EXTERNAL_IP=yes - DETECT_RELAY_IP=yes ports: - \"3478:3478\" - \"3478:3478/udp\" - \"5349:5349\" - \"5349:5349/udp\" - \"49152-65535:49152-65535/udp\" command: \"--fingerprint --lt-cred-mech --user myuser:mypass --realm yourdomain.com network_mode: \"host\" Put the content bellow in docker-compose.yml file and run the following command docker compose up -d Check the service is correctly started with the following command docker compose logs -f Deploying mediaserver with Docker Compose The following sample give you example of how deploying a mediasoup server with Docker Compose. Don't forget to adjust the following settings: replace mydomain.com by you domain. replace PUBLIC_IP value by you real server IP replace ANNOUNCED_IP value by you internet public IP replace API_USER and API_SERVER values by user you choose. replace JWT_SECRET value by random secret. services: backend: image: docker.io/iabsis/mediasoup-api ports: - \"3443:3443\" environment: ## Define random key here - JWT_SECRET=aadsrwerrf ## Configure credentials used to consume mediasoup API - API_USER=abcd - API_SECRET=1234 ## Define here the public IP server - PUBLIC_IP=1.2.3.4 ## If server is behind nat, you might need to advertise # the real public IP by commenting out this line. - ANNOUNCED_IP=1.2.3.4 ## You will need to open UDP port in the follow range, you # can adjust the range if required. # - RTC_MIN_PORT=40000 # - RTC_MAX_PORT=49000 ## The best practice is to use reverse proxy, but if you want # this API to serve directly HTTPS, you might need to configure the # following lines # - HTTP_ONLY=true - LISTEN=3443 - CERT=/etc/mediasoup-api/certs/example.com/fullchain.pem - KEY=/etc/mediasoup-api/certs/example.com/privkey.pem ## Redis server - REDIS_HOST=redis depends_on: - redis volumes: - ./data/certbot/:/etc/mediasoup-api/certs redis: image: redis certbot: image: certbot/certbot:latest volumes: - ./data/certbot/:/etc/letsencrypt/live command: certonly --standalone -d turn.mydomain.com --non-interactive --agree-tos --email info@mydomain.com certbot-renew: image: certbot/certbot:latest volumes: - ./data/certbot/:/etc/letsencrypt/live entrypoint: \"/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'\" Put the content bellow in docker-compose.yml file and run the following command docker compose up -d Check the service is correctly started with the following command docker compose logs -f Deploying HCW@Home with Docker Compose The following sample give you example of how deploying HCW@Home stack with Docker Compose. Double check the differents values you need to define. services: mongo: image: mongo:6 volumes: - ./data/mongo:/data/mongo patient: image: docker.io/iabsis/hcw-patient ports: - \"8000:80\" environment: - BACKEND_URL=http://backend:1337 depends_on: - mongo - backend doctor: image: docker.io/iabsis/hcw-doctor ports: - \"8001:80\" environment: - BACKEND_URL=http://backend:1337 depends_on: - mongo - backend backend: image: docker.io/iabsis/hcw-backend ports: - \"1337:1337\" environment: # Configure here database, by default # a local mongo is used. - DB_URI=mongodb://mongo:27017/hcw-athome # Configure Redis URL - REDIS_HOST=redis #- REDIS_PORT=6379 #- REDIS_PASSWORD= # Generate random key used by JWT encoding. - APP_SECRET='' # If used, it's possible to create JWT token # externally with the following key. #SHARED_EXTERNAL_AUTH_SECRET=12345678 # Wich environement file to use. - NODE_ENV=production # Public url to be accessed by the patient - PUBLIC_URL=https://<replace-by-my-domain> # Mail configuration. - MAIL_SMTP_HOST=<https://my-smtp-server.ch%3E/ - MAIL_SMTP_PORT=465 - MAIL_SMTP_SECURE=true - https://MAIL_SMTP_SENDER%3Dnoreply@hcw-athome.ch/ - MAIL_SMTP_USER= - MAIL_SMTP_PASSWORD= ## Choose to use either OVH or Swisscom # Comment/comment out line according to # your environment # SMS OVH Gateway credentials # - SMS_OVH_SENDER= # - SMS_OVH_ENDPOINT= # - SMS_OVH_APP_KEY= # - SMS_OVH_APP_SECRET= # - SMS_OVH_APP_CONSUMER_KEY= # SMS Swisscom Gateway credentials # - SMS_SWISSCOM_ACCOUNT= # - SMS_SWISSCOM_PASSWORD= # - SMS_SWISSCOM_SENDER= # ClickATell SMS Gateway credentials - SMS_CLICKATEL= # Define enabled authentication methods # Can be one of the following choice # password : user will be inside Mongo only. (default) # saml : configure SAML entries, compatible with Azure. # both : user can login with both methods (saml and password). # openid : user will login with openid only. - LOGIN_METHOD=password # SAML environement # - SAML_CALLBACK='' # - SAML_ENTRY_POINT='' # - SAML_ISSUER='' # - EMAIL_FIELD='email' # - FIRSTNAME_FIELD='firstname' # - LASTNAME_FIELD='lastname' # - LOGOUT_URL='' # - SAML_PATH_KEY='/etc/hcw-athome/saml.key' # - SAML_CERT='' # - SAML_FIRSTNAME_FIELD='givenName' # - SAML_LASTNAME_FIELD='lastName' # - SAML_AUTOCREATE_USER=true # If you use Redmine, you can configure here # Access key to the project. # - REDMINE_DOMAIN= # - REDMINE_API_KEY= # If external API is used, define here # the mongo ID of the queue where default consultation # are dropping. # Default value is Default # - DEFAULT_QUEUE_ID=Default # Public url to be accessed by the doctor - DOCTOR_URL=https://<replace-by-my-domain> # ClamAv can be used to check sanity of transfered # files. Define there socket path for Antivirus Clamav - CLAM_HOST=clamav # - CLAM_PORT=3310 # Enable AD if Active Directory or LDAP must be used # to get user information and groups. # Default value is false # - AD_ENABLE=false # Access to Active Directory server. Account service is # required here. Readonly is enough. # - AD_URIS=ldap://<ip or hostname of ad server> # - AD_BASE=dc=ad,dc=sample,dc=local # - AD_USER=-service-ad-readonly # - AD_PASSWORD=<replace-password> ## Allow user access if AD user in inside the following group. # - AD_DOCTOR_GROUP=HCWATHOME-DOCTOR # Auto Group to Queue mapping # Wildcard group is used to map AD group to internal Queue. # By example AD Group QUEUE-Psycho is mapped to Queue named Psycho. # - AD_QUEUE_MAP=^QUEUE-(.*)$ # If AD is used, how to map user field to AD. # - AD_ATTR_FIRSTNAME=givenName # - AD_ATTR_FISTNAME=givenName # - AD_ATTR_LASTNAME=sn # - AD_ATTR_EMAIL=mail # - AD_ATTR_DEPARTMENT=department # - AD_ATTR_FUNCTION=company # - AD_ATTR_LOGIN=mail # If all Mediasoup servers fails, fallback # to the following server. - MEDIASOUP_URL=https://<replace-by-my-domain> - MEDIASOUP_USER=abcd - MEDIASOUP_SECRET=1234 ## Branding used by HCW@Home - BRANDING=ICRC@Home ## Comment out if you want put a logo path. #LOGO=/etc/hcw-athome/logo.png ## Enable accessibility - ACCESSIBILITY_MODE=false # OpenID configuration. - OPENID_ISSUER_BASE_URL='' - OPENID_CLIENT_ID='' - OPENID_CLIENT_SECRET='' - OPENID_CALLBACK_URL='' - OPENID_AUTHORIZATION_URL==https://<replace-by-my-domain> - OPENID_TOKEN_URL='' - OPENID_USER_INFO_URL='' - OPENID_LOGOUT_URL='' - OPENID_AUTOCREATE_USER=true ## Path to store attachments - ATTACHMENTS_DIR=/data/attachments depends_on: - mongo - redis - clamav volumes: - ./data/attachments:/data/attachments restart: always redis: image: redis clamav: image: clamav/clamav ports: - \"3310:3310\"","title":"Install with Docker"},{"location":"docker/#how-to-install-hcwhome-with-docker","text":"","title":"How to install HCW@Home with Docker"},{"location":"docker/#deploy-docker-compose","text":"The following sample give you example of how deploying a coturn server with Docker Compose. Don't forget to adjust the following settings: myuser which is the login account to use turn feature mypass which is the password account to use turn feature realm which can be any name of fictive domain you choose services: coturn: image: docker.io/coturn/coturn environment: - DETECT_EXTERNAL_IP=yes - DETECT_RELAY_IP=yes ports: - \"3478:3478\" - \"3478:3478/udp\" - \"5349:5349\" - \"5349:5349/udp\" - \"49152-65535:49152-65535/udp\" command: \"--fingerprint --lt-cred-mech --user myuser:mypass --realm yourdomain.com network_mode: \"host\" Put the content bellow in docker-compose.yml file and run the following command docker compose up -d Check the service is correctly started with the following command docker compose logs -f","title":"Deploy Docker Compose"},{"location":"docker/#deploying-mediaserver-with-docker-compose","text":"The following sample give you example of how deploying a mediasoup server with Docker Compose. Don't forget to adjust the following settings: replace mydomain.com by you domain. replace PUBLIC_IP value by you real server IP replace ANNOUNCED_IP value by you internet public IP replace API_USER and API_SERVER values by user you choose. replace JWT_SECRET value by random secret. services: backend: image: docker.io/iabsis/mediasoup-api ports: - \"3443:3443\" environment: ## Define random key here - JWT_SECRET=aadsrwerrf ## Configure credentials used to consume mediasoup API - API_USER=abcd - API_SECRET=1234 ## Define here the public IP server - PUBLIC_IP=1.2.3.4 ## If server is behind nat, you might need to advertise # the real public IP by commenting out this line. - ANNOUNCED_IP=1.2.3.4 ## You will need to open UDP port in the follow range, you # can adjust the range if required. # - RTC_MIN_PORT=40000 # - RTC_MAX_PORT=49000 ## The best practice is to use reverse proxy, but if you want # this API to serve directly HTTPS, you might need to configure the # following lines # - HTTP_ONLY=true - LISTEN=3443 - CERT=/etc/mediasoup-api/certs/example.com/fullchain.pem - KEY=/etc/mediasoup-api/certs/example.com/privkey.pem ## Redis server - REDIS_HOST=redis depends_on: - redis volumes: - ./data/certbot/:/etc/mediasoup-api/certs redis: image: redis certbot: image: certbot/certbot:latest volumes: - ./data/certbot/:/etc/letsencrypt/live command: certonly --standalone -d turn.mydomain.com --non-interactive --agree-tos --email info@mydomain.com certbot-renew: image: certbot/certbot:latest volumes: - ./data/certbot/:/etc/letsencrypt/live entrypoint: \"/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'\" Put the content bellow in docker-compose.yml file and run the following command docker compose up -d Check the service is correctly started with the following command docker compose logs -f","title":"Deploying mediaserver with Docker Compose"},{"location":"docker/#deploying-hcwhome-with-docker-compose","text":"The following sample give you example of how deploying HCW@Home stack with Docker Compose. Double check the differents values you need to define. services: mongo: image: mongo:6 volumes: - ./data/mongo:/data/mongo patient: image: docker.io/iabsis/hcw-patient ports: - \"8000:80\" environment: - BACKEND_URL=http://backend:1337 depends_on: - mongo - backend doctor: image: docker.io/iabsis/hcw-doctor ports: - \"8001:80\" environment: - BACKEND_URL=http://backend:1337 depends_on: - mongo - backend backend: image: docker.io/iabsis/hcw-backend ports: - \"1337:1337\" environment: # Configure here database, by default # a local mongo is used. - DB_URI=mongodb://mongo:27017/hcw-athome # Configure Redis URL - REDIS_HOST=redis #- REDIS_PORT=6379 #- REDIS_PASSWORD= # Generate random key used by JWT encoding. - APP_SECRET='' # If used, it's possible to create JWT token # externally with the following key. #SHARED_EXTERNAL_AUTH_SECRET=12345678 # Wich environement file to use. - NODE_ENV=production # Public url to be accessed by the patient - PUBLIC_URL=https://<replace-by-my-domain> # Mail configuration. - MAIL_SMTP_HOST=<https://my-smtp-server.ch%3E/ - MAIL_SMTP_PORT=465 - MAIL_SMTP_SECURE=true - https://MAIL_SMTP_SENDER%3Dnoreply@hcw-athome.ch/ - MAIL_SMTP_USER= - MAIL_SMTP_PASSWORD= ## Choose to use either OVH or Swisscom # Comment/comment out line according to # your environment # SMS OVH Gateway credentials # - SMS_OVH_SENDER= # - SMS_OVH_ENDPOINT= # - SMS_OVH_APP_KEY= # - SMS_OVH_APP_SECRET= # - SMS_OVH_APP_CONSUMER_KEY= # SMS Swisscom Gateway credentials # - SMS_SWISSCOM_ACCOUNT= # - SMS_SWISSCOM_PASSWORD= # - SMS_SWISSCOM_SENDER= # ClickATell SMS Gateway credentials - SMS_CLICKATEL= # Define enabled authentication methods # Can be one of the following choice # password : user will be inside Mongo only. (default) # saml : configure SAML entries, compatible with Azure. # both : user can login with both methods (saml and password). # openid : user will login with openid only. - LOGIN_METHOD=password # SAML environement # - SAML_CALLBACK='' # - SAML_ENTRY_POINT='' # - SAML_ISSUER='' # - EMAIL_FIELD='email' # - FIRSTNAME_FIELD='firstname' # - LASTNAME_FIELD='lastname' # - LOGOUT_URL='' # - SAML_PATH_KEY='/etc/hcw-athome/saml.key' # - SAML_CERT='' # - SAML_FIRSTNAME_FIELD='givenName' # - SAML_LASTNAME_FIELD='lastName' # - SAML_AUTOCREATE_USER=true # If you use Redmine, you can configure here # Access key to the project. # - REDMINE_DOMAIN= # - REDMINE_API_KEY= # If external API is used, define here # the mongo ID of the queue where default consultation # are dropping. # Default value is Default # - DEFAULT_QUEUE_ID=Default # Public url to be accessed by the doctor - DOCTOR_URL=https://<replace-by-my-domain> # ClamAv can be used to check sanity of transfered # files. Define there socket path for Antivirus Clamav - CLAM_HOST=clamav # - CLAM_PORT=3310 # Enable AD if Active Directory or LDAP must be used # to get user information and groups. # Default value is false # - AD_ENABLE=false # Access to Active Directory server. Account service is # required here. Readonly is enough. # - AD_URIS=ldap://<ip or hostname of ad server> # - AD_BASE=dc=ad,dc=sample,dc=local # - AD_USER=-service-ad-readonly # - AD_PASSWORD=<replace-password> ## Allow user access if AD user in inside the following group. # - AD_DOCTOR_GROUP=HCWATHOME-DOCTOR # Auto Group to Queue mapping # Wildcard group is used to map AD group to internal Queue. # By example AD Group QUEUE-Psycho is mapped to Queue named Psycho. # - AD_QUEUE_MAP=^QUEUE-(.*)$ # If AD is used, how to map user field to AD. # - AD_ATTR_FIRSTNAME=givenName # - AD_ATTR_FISTNAME=givenName # - AD_ATTR_LASTNAME=sn # - AD_ATTR_EMAIL=mail # - AD_ATTR_DEPARTMENT=department # - AD_ATTR_FUNCTION=company # - AD_ATTR_LOGIN=mail # If all Mediasoup servers fails, fallback # to the following server. - MEDIASOUP_URL=https://<replace-by-my-domain> - MEDIASOUP_USER=abcd - MEDIASOUP_SECRET=1234 ## Branding used by HCW@Home - BRANDING=ICRC@Home ## Comment out if you want put a logo path. #LOGO=/etc/hcw-athome/logo.png ## Enable accessibility - ACCESSIBILITY_MODE=false # OpenID configuration. - OPENID_ISSUER_BASE_URL='' - OPENID_CLIENT_ID='' - OPENID_CLIENT_SECRET='' - OPENID_CALLBACK_URL='' - OPENID_AUTHORIZATION_URL==https://<replace-by-my-domain> - OPENID_TOKEN_URL='' - OPENID_USER_INFO_URL='' - OPENID_LOGOUT_URL='' - OPENID_AUTOCREATE_USER=true ## Path to store attachments - ATTACHMENTS_DIR=/data/attachments depends_on: - mongo - redis - clamav volumes: - ./data/attachments:/data/attachments restart: always redis: image: redis clamav: image: clamav/clamav ports: - \"3310:3310\"","title":"Deploying HCW@Home with Docker Compose"},{"location":"doctor-to-patient/","text":"Login on HCW@Home HCW@Home exclusively works in a web browser. Open the app with the link of your instance. It exists several ways to login into HCW@Home depending of how the solution is integrated. If you connected on Instance Demo, an SSO is in place, it means the access is handled by external server and requires to login only one time. Because you are already loggued in this website, you will be connected automatically on HCW@Home as well. The login page may vary but could look like that. Institutional access mean you will connect with Single Sign On process. You can also login with a simple email and password, concluded by SMS validation (2FA). Dashboard page and menu Dashboard permits to have a quick view of what is on going. The Waiting queue are patient who joined the consultation, but waiting for healthcare to handle it. Open consultation are consultation started by you. You can have the full list of Opened consultation and Waiting queue by clicking on icon available on the left of the app. Once you achieved a consultation, the consultation goes into Consultation history , but remains only 24h before data are completely wiped. We will describe a bit more about the consultation process in next sections. Invitations icon will permit to send invitation to your patient. We also describe this process in next sections. Finally the Test sound/video icon permits to check that Microphone and Webcam is usable correctly. Sending invite to a patient One of the usual way to use HCW@Home is starting by sending invite directly to your patient. To achieve this, click on Invitations icon, and click on New invitation . You will be asked to choose if your patient is remote (the usual) or in your office (special case where you want to do video call with third party). Let chose Patient is remote . Now define your patient Firstname , Lastname , Gender and Phone number or Email . Firstname, Lastname and Sex are only used to ease patient identification when he is in Waiting queue. Phone number or Email will be used to directly send the invite link, by SMS or Email. You can optionnaly invite a guest with the option available on the right. Revoke or resend invite In the event of you patient didn't received the link, you can resend invite. Click on Invitation from the left menu, find the right invite from the list and click on Resend. In the event of you want to cancel and rekove the invite, you can click on Delete. If you delete an invite, the patient will get an error if he clicks on the link. No notification are sent by HCW@Home to indicates the invite has been cancelled. Manage queuing As soon as a patient uses the invite link, he will be asked to join the consultation. Then the patient will come in Waiting queue, visible from Dashboard or Waiting queue icon. You will received an audible notification in page page, prefer always keep any HCW@home opened if you expect to have remote consultation. You can click on the consultation request to open a quick overview and message already sent by patient. If you are ready to handle the consultation, click on Start consultation . As soon as you click on Start consultation , the consultation is moved into Open consultation section. At this stage, if a shared queue was used to make consultation request to other doctors, you will be the only one that will able to see this consultation. Make the consultation Once you opened a consultation, you will see the consultation overview, with patient information, patient status (if he is online or not), and message he sent. You can now manage the consultation as you want: Send text message Send attachment Do a phone call Do a video call Doing a phone or video call will make the patient phone/computer rining, he will have the choice to answer to the call or not. End the consultation When consultation ends, you have the choice to keep the consultation opened, or simply close it. Click on Terminate consultation button available on the top right. If you keep opened the consultation, the patient can still see message and attachments. He can still send message and you can restart an audio or video call if required. If you close the consultation, the patient will be unable to see information and reach a thanks screen. He will unable to send message or attachment. If you close the consultation, the consultation will be move to Consultation history. The consultation data will remain only 24h before it will be deleted.","title":"Patient invited by Doctor"},{"location":"doctor-to-patient/#login-on-hcwhome","text":"HCW@Home exclusively works in a web browser. Open the app with the link of your instance. It exists several ways to login into HCW@Home depending of how the solution is integrated. If you connected on Instance Demo, an SSO is in place, it means the access is handled by external server and requires to login only one time. Because you are already loggued in this website, you will be connected automatically on HCW@Home as well. The login page may vary but could look like that. Institutional access mean you will connect with Single Sign On process. You can also login with a simple email and password, concluded by SMS validation (2FA).","title":"Login on HCW@Home"},{"location":"doctor-to-patient/#dashboard-page-and-menu","text":"Dashboard permits to have a quick view of what is on going. The Waiting queue are patient who joined the consultation, but waiting for healthcare to handle it. Open consultation are consultation started by you. You can have the full list of Opened consultation and Waiting queue by clicking on icon available on the left of the app. Once you achieved a consultation, the consultation goes into Consultation history , but remains only 24h before data are completely wiped. We will describe a bit more about the consultation process in next sections. Invitations icon will permit to send invitation to your patient. We also describe this process in next sections. Finally the Test sound/video icon permits to check that Microphone and Webcam is usable correctly.","title":"Dashboard page and menu"},{"location":"doctor-to-patient/#sending-invite-to-a-patient","text":"One of the usual way to use HCW@Home is starting by sending invite directly to your patient. To achieve this, click on Invitations icon, and click on New invitation . You will be asked to choose if your patient is remote (the usual) or in your office (special case where you want to do video call with third party). Let chose Patient is remote . Now define your patient Firstname , Lastname , Gender and Phone number or Email . Firstname, Lastname and Sex are only used to ease patient identification when he is in Waiting queue. Phone number or Email will be used to directly send the invite link, by SMS or Email. You can optionnaly invite a guest with the option available on the right.","title":"Sending invite to a patient"},{"location":"doctor-to-patient/#revoke-or-resend-invite","text":"In the event of you patient didn't received the link, you can resend invite. Click on Invitation from the left menu, find the right invite from the list and click on Resend. In the event of you want to cancel and rekove the invite, you can click on Delete. If you delete an invite, the patient will get an error if he clicks on the link. No notification are sent by HCW@Home to indicates the invite has been cancelled.","title":"Revoke or resend invite"},{"location":"doctor-to-patient/#manage-queuing","text":"As soon as a patient uses the invite link, he will be asked to join the consultation. Then the patient will come in Waiting queue, visible from Dashboard or Waiting queue icon. You will received an audible notification in page page, prefer always keep any HCW@home opened if you expect to have remote consultation. You can click on the consultation request to open a quick overview and message already sent by patient. If you are ready to handle the consultation, click on Start consultation . As soon as you click on Start consultation , the consultation is moved into Open consultation section. At this stage, if a shared queue was used to make consultation request to other doctors, you will be the only one that will able to see this consultation.","title":"Manage queuing"},{"location":"doctor-to-patient/#make-the-consultation","text":"Once you opened a consultation, you will see the consultation overview, with patient information, patient status (if he is online or not), and message he sent. You can now manage the consultation as you want: Send text message Send attachment Do a phone call Do a video call Doing a phone or video call will make the patient phone/computer rining, he will have the choice to answer to the call or not.","title":"Make the consultation"},{"location":"doctor-to-patient/#end-the-consultation","text":"When consultation ends, you have the choice to keep the consultation opened, or simply close it. Click on Terminate consultation button available on the top right. If you keep opened the consultation, the patient can still see message and attachments. He can still send message and you can restart an audio or video call if required. If you close the consultation, the patient will be unable to see information and reach a thanks screen. He will unable to send message or attachment. If you close the consultation, the consultation will be move to Consultation history. The consultation data will remain only 24h before it will be deleted.","title":"End the consultation"},{"location":"keycloak/","text":"Configure HCW@Home with Keycloak Introduction HCW@Home officially and natively supports OpenID authentication as client. This guide will help you to configure Keycloak as part of SSO service with HCW@Home. Note it's possible to integrate any king of OpenID provider and has been succesfully tested with Microsoft 365. Note that OpenID is used into Doctor, Admin and Requester interface. Requirements Having a working instance of Keycloak and configured Realm . Having a deploy HCW@Home instance. Adding new client in Keycloak The first step is simply add Keycloak client for HCW@Home. Open the right Realm . Under Client , click on Create client button. Fill the form Client type: OpenID Connect Client ID: choose an id, by example hcw-athome . Click on Next and continue with: Client authentication: On Authorization: Off Authentication flow: keep default ( Standard flow and Direct access grants ) Click on Next and continue with: Root URL: give the doctor URL (e.g. https://access-hcw.example.com ) Home URL: you can keep empty Valid redirect URIs: provide a list of the three doctor, patient and admin URL. Don't forget to add /* at the end of the URL (e.g. https://access-hcw.example.com/* , https://app-hcw.example.com/* , ...) Click on Save Now keep back the following important values as we will need it later. Realm: the one you choosed before creating client. Client ID: the one you define when creating client. Client Secret: go to tag Credentials and copy the Client secret key. Your keycloak root URL: just look the URL in your browser (e.g. https://auth.example.com). Configure HCW@Home Now you have configured the client in Keycloak, HCW@Home configuration should be quite straightforward. Edit the HCW@Home configuration file (e.g. /etc/hcw-athome/hcw-athome.conf ) and add/edit or uncomment the following keys. Don't forget to replace <realm> , <keycloak root url> , <client id> and <client secret> according to your Keycloak configuration. # Change from password to openid (you can easily rollback if OpenID is not working) LOGIN_METHOD=openid # Standard OpenID values OPENID_ISSUER_BASE_URL=https://<keycloak root url>/realms/<realm> OPENID_CLIENT_ID=<client id> OPENID_CLIENT_SECRET=<client secret> OPENID_CALLBACK_URL=/api/v1/login-openid/callback OPENID_AUTHORIZATION_URL=https://<keycloak root url>/realms/<realm>/protocol/openid-connect/auth OPENID_TOKEN_URL=https://<keycloak root url>/realms/<realm>/protocol/openid-connect/token OPENID_USER_INFO_URL=https://<keycloak root url>/realms/<realm>/protocol/openid-connect/userinfo OPENID_LOGOUT_URL=https://<keycloak root url>/realms/<realm>/protocol/openid-connect/logout # Keep false if you still want to create users into admin interface, # otherwise any user will be able to use HCW@Home. OPENID_AUTOCREATE_USER=true Now restart the backend systemctl restart hcw-athome","title":"Configure with Keycloak"},{"location":"keycloak/#configure-hcwhome-with-keycloak","text":"","title":"Configure HCW@Home with Keycloak"},{"location":"keycloak/#introduction","text":"HCW@Home officially and natively supports OpenID authentication as client. This guide will help you to configure Keycloak as part of SSO service with HCW@Home. Note it's possible to integrate any king of OpenID provider and has been succesfully tested with Microsoft 365. Note that OpenID is used into Doctor, Admin and Requester interface.","title":"Introduction"},{"location":"keycloak/#requirements","text":"Having a working instance of Keycloak and configured Realm . Having a deploy HCW@Home instance.","title":"Requirements"},{"location":"keycloak/#adding-new-client-in-keycloak","text":"The first step is simply add Keycloak client for HCW@Home. Open the right Realm . Under Client , click on Create client button. Fill the form Client type: OpenID Connect Client ID: choose an id, by example hcw-athome . Click on Next and continue with: Client authentication: On Authorization: Off Authentication flow: keep default ( Standard flow and Direct access grants ) Click on Next and continue with: Root URL: give the doctor URL (e.g. https://access-hcw.example.com ) Home URL: you can keep empty Valid redirect URIs: provide a list of the three doctor, patient and admin URL. Don't forget to add /* at the end of the URL (e.g. https://access-hcw.example.com/* , https://app-hcw.example.com/* , ...) Click on Save Now keep back the following important values as we will need it later. Realm: the one you choosed before creating client. Client ID: the one you define when creating client. Client Secret: go to tag Credentials and copy the Client secret key. Your keycloak root URL: just look the URL in your browser (e.g. https://auth.example.com).","title":"Adding new client in Keycloak"},{"location":"keycloak/#configure-hcwhome","text":"Now you have configured the client in Keycloak, HCW@Home configuration should be quite straightforward. Edit the HCW@Home configuration file (e.g. /etc/hcw-athome/hcw-athome.conf ) and add/edit or uncomment the following keys. Don't forget to replace <realm> , <keycloak root url> , <client id> and <client secret> according to your Keycloak configuration. # Change from password to openid (you can easily rollback if OpenID is not working) LOGIN_METHOD=openid # Standard OpenID values OPENID_ISSUER_BASE_URL=https://<keycloak root url>/realms/<realm> OPENID_CLIENT_ID=<client id> OPENID_CLIENT_SECRET=<client secret> OPENID_CALLBACK_URL=/api/v1/login-openid/callback OPENID_AUTHORIZATION_URL=https://<keycloak root url>/realms/<realm>/protocol/openid-connect/auth OPENID_TOKEN_URL=https://<keycloak root url>/realms/<realm>/protocol/openid-connect/token OPENID_USER_INFO_URL=https://<keycloak root url>/realms/<realm>/protocol/openid-connect/userinfo OPENID_LOGOUT_URL=https://<keycloak root url>/realms/<realm>/protocol/openid-connect/logout # Keep false if you still want to create users into admin interface, # otherwise any user will be able to use HCW@Home. OPENID_AUTOCREATE_USER=true Now restart the backend systemctl restart hcw-athome","title":"Configure HCW@Home"},{"location":"partner-to-doctor/","text":"Working with Partners It's possible to delegate consultation request to partners (B2B model), whenever a nurse or a clinician need to talk with expert for specific cases. Account request Partner must request account on a specific URL (you can have a look on https://app.hcw-at-home.com/requester ). They have to choose No account ? Request account here in order to have a registration form. Upon the form validation, a HCW@Home admin must validate the user before he will be entitled to ask for new consultations in addition of create the user with same email in SSO platform. Request consultation Once account has been added and approved, the Parner can click on Institutional Connection and login. The partner has to click on Request new consultation and fill the patient's information. Upon the form validation, all doctors in the select Area will be able to see the consultation request. Doctors might ensure to Configure notification in order do not miss a consultation request. Consultation history According to the platform policy, once a consultation is closed, the consultation will stay visible only 24h.","title":"Consultation requested by Partners"},{"location":"partner-to-doctor/#working-with-partners","text":"It's possible to delegate consultation request to partners (B2B model), whenever a nurse or a clinician need to talk with expert for specific cases.","title":"Working with Partners"},{"location":"partner-to-doctor/#account-request","text":"Partner must request account on a specific URL (you can have a look on https://app.hcw-at-home.com/requester ). They have to choose No account ? Request account here in order to have a registration form. Upon the form validation, a HCW@Home admin must validate the user before he will be entitled to ask for new consultations in addition of create the user with same email in SSO platform.","title":"Account request"},{"location":"partner-to-doctor/#request-consultation","text":"Once account has been added and approved, the Parner can click on Institutional Connection and login. The partner has to click on Request new consultation and fill the patient's information. Upon the form validation, all doctors in the select Area will be able to see the consultation request. Doctors might ensure to Configure notification in order do not miss a consultation request.","title":"Request consultation"},{"location":"partner-to-doctor/#consultation-history","text":"According to the platform policy, once a consultation is closed, the consultation will stay visible only 24h.","title":"Consultation history"},{"location":"python/","text":"Use HCW Python SDK HCW Py SDK is a simple way to interact with Health Care Worker @Home API. Installation pip install hcw-py-sdk Pip package https://pypi.org/project/hcw-py-sdk/ Example from hcw_py_sdk import HCW # Create instance with API info hcw = HCW( base_url='https://{url}/api/v1', username='{admin}', password='{password}' ) # Print the queues print(hcw.queue.list)","title":"Python SDK"},{"location":"python/#use-hcw-python-sdk","text":"HCW Py SDK is a simple way to interact with Health Care Worker @Home API.","title":"Use HCW Python SDK"},{"location":"python/#installation","text":"pip install hcw-py-sdk","title":"Installation"},{"location":"python/#pip-package","text":"https://pypi.org/project/hcw-py-sdk/","title":"Pip package"},{"location":"python/#example","text":"from hcw_py_sdk import HCW # Create instance with API info hcw = HCW( base_url='https://{url}/api/v1', username='{admin}', password='{password}' ) # Print the queues print(hcw.queue.list)","title":"Example"},{"location":"troubleshooting/","text":"Troubleshooting ERROR 1: Error initializing clamscan: Error: connect ENOENT /var/run/clamav/clamd.ctl Error initializing clamscan: Error: connect ENOENT /var/run/clamav/clamd.ctl at PipeConnectWrap.afterConnect [as oncomplete] (node:net:1278:16) { errno: -2, code: 'ENOENT', syscall: 'connect', address: '/var/run/clamav/clamd.ctl' } Check Clamv socket is existing with: ls -l /var/run/clamav/clamd.ctl If not, check the clamav-daemon service is running properly. ERROR 2: Error: connect ECONNREFUSED 127.0.0.1:6379 error: A hook (`session`) failed to load! error: Could not tear down the ORM hook. Error details: Error: Consistency violation: Attempting to tear down a datastore (`default`) which is not currently registered with this adapter. This is usually due to a race condition in userland code (e.g. attempting to tear down the same ORM instance more than once), or it could be due to a bug in this adapter. (If you get stumped, reach out at http://sailsjs.com/support.) at Object.teardown (/usr/share/hcw-athome/backend/node_modules/sails-mongo/lib/index.js:390:19) at /usr/share/hcw-athome/backend/node_modules/waterline/lib/waterline.js:767:27 at /usr/share/hcw-athome/backend/node_modules/async/dist/async.js:3113:16 at eachOfArrayLike (/usr/share/hcw-athome/backend/node_modules/async/dist/async.js:1072:9) at eachOf (/usr/share/hcw-athome/backend/node_modules/async/dist/async.js:1120:5) at Object.eachLimit (/usr/share/hcw-athome/backend/node_modules/async/dist/async.js:3175:5) at Object.teardown (/usr/share/hcw-athome/backend/node_modules/waterline/lib/waterline.js:751:11) at Hook.teardown (/usr/share/hcw-athome/backend/node_modules/sails-hook-orm/index.js:246:30) at Sails.wrapper (/usr/share/hcw-athome/backend/node_modules/@sailshq/lodash/lib/index.js:3282:19) at Object.onceWrapper (node:events:627:28) at Sails.emit (node:events:513:28) at Sails.emit (node:domain:489:12) at https://sails.emitter.emit/ (/usr/share/hcw-athome/backend/node_modules/sails/lib/app/private/after.js:56:26) at /usr/share/hcw-athome/backend/node_modules/sails/lib/app/lower.js:67:11 at beforeShutdown (/usr/share/hcw-athome/backend/node_modules/sails/lib/app/lower.js:45:12) at Sails.lower (/usr/share/hcw-athome/backend/node_modules/sails/lib/app/lower.js:49:3) error: Failed to lift app: Error: connect ECONNREFUSED 127.0.0.1:6379 at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1278:16) Check Redis server is working correctly.","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#error-1-error-initializing-clamscan-error-connect-enoent-varrunclamavclamdctl","text":"Error initializing clamscan: Error: connect ENOENT /var/run/clamav/clamd.ctl at PipeConnectWrap.afterConnect [as oncomplete] (node:net:1278:16) { errno: -2, code: 'ENOENT', syscall: 'connect', address: '/var/run/clamav/clamd.ctl' } Check Clamv socket is existing with: ls -l /var/run/clamav/clamd.ctl If not, check the clamav-daemon service is running properly.","title":"ERROR 1: Error initializing clamscan: Error: connect ENOENT /var/run/clamav/clamd.ctl"},{"location":"troubleshooting/#error-2-error-connect-econnrefused-1270016379","text":"error: A hook (`session`) failed to load! error: Could not tear down the ORM hook. Error details: Error: Consistency violation: Attempting to tear down a datastore (`default`) which is not currently registered with this adapter. This is usually due to a race condition in userland code (e.g. attempting to tear down the same ORM instance more than once), or it could be due to a bug in this adapter. (If you get stumped, reach out at http://sailsjs.com/support.) at Object.teardown (/usr/share/hcw-athome/backend/node_modules/sails-mongo/lib/index.js:390:19) at /usr/share/hcw-athome/backend/node_modules/waterline/lib/waterline.js:767:27 at /usr/share/hcw-athome/backend/node_modules/async/dist/async.js:3113:16 at eachOfArrayLike (/usr/share/hcw-athome/backend/node_modules/async/dist/async.js:1072:9) at eachOf (/usr/share/hcw-athome/backend/node_modules/async/dist/async.js:1120:5) at Object.eachLimit (/usr/share/hcw-athome/backend/node_modules/async/dist/async.js:3175:5) at Object.teardown (/usr/share/hcw-athome/backend/node_modules/waterline/lib/waterline.js:751:11) at Hook.teardown (/usr/share/hcw-athome/backend/node_modules/sails-hook-orm/index.js:246:30) at Sails.wrapper (/usr/share/hcw-athome/backend/node_modules/@sailshq/lodash/lib/index.js:3282:19) at Object.onceWrapper (node:events:627:28) at Sails.emit (node:events:513:28) at Sails.emit (node:domain:489:12) at https://sails.emitter.emit/ (/usr/share/hcw-athome/backend/node_modules/sails/lib/app/private/after.js:56:26) at /usr/share/hcw-athome/backend/node_modules/sails/lib/app/lower.js:67:11 at beforeShutdown (/usr/share/hcw-athome/backend/node_modules/sails/lib/app/lower.js:45:12) at Sails.lower (/usr/share/hcw-athome/backend/node_modules/sails/lib/app/lower.js:49:3) error: Failed to lift app: Error: connect ECONNREFUSED 127.0.0.1:6379 at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1278:16) Check Redis server is working correctly.","title":"ERROR 2: Error: connect ECONNREFUSED 127.0.0.1:6379"},{"location":"users/","text":"Create the first admin user In the event of you use login and password credential, you might need to have an admin or a doctor role. The backend doesn't create any user, so you will need to do a small Mongo request. If you deployed HCW@Home with Debian/Ubuntu or Redhat/Rocky package, just enter in Mongo with mongosh command. If you used Docker, you can connect in Mongo Shell with docker compose exec -ti mongo mongosh . You can now run the following requests to get your first user. use hcw-athome; # Replace here if you changed the database name db.user.insertOne({email:\"replace-by-your-email\", firstName:\"replace-by-your-firstname\", lastName:\"replace-by-your-lastname\", password: \"$2b$10$uixuJK9bmstlDRrkp3XJV.y8r00UeD.Gmf9/sjundnbJ7BAB3qjyG\", role: \"admin\", createdAt: new Date().getTime(), \"updatedAt\": new Date().getTime(), \"username\" : \"\", phoneNumber: \"+41...\"})","title":"User management"},{"location":"users/#create-the-first-admin-user","text":"In the event of you use login and password credential, you might need to have an admin or a doctor role. The backend doesn't create any user, so you will need to do a small Mongo request. If you deployed HCW@Home with Debian/Ubuntu or Redhat/Rocky package, just enter in Mongo with mongosh command. If you used Docker, you can connect in Mongo Shell with docker compose exec -ti mongo mongosh . You can now run the following requests to get your first user. use hcw-athome; # Replace here if you changed the database name db.user.insertOne({email:\"replace-by-your-email\", firstName:\"replace-by-your-firstname\", lastName:\"replace-by-your-lastname\", password: \"$2b$10$uixuJK9bmstlDRrkp3XJV.y8r00UeD.Gmf9/sjundnbJ7BAB3qjyG\", role: \"admin\", createdAt: new Date().getTime(), \"updatedAt\": new Date().getTime(), \"username\" : \"\", phoneNumber: \"+41...\"})","title":"Create the first admin user"}]}